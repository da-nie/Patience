//====================================================================================================
//подключаемые библиотеки
//====================================================================================================
#include "ccardbox.h"

//====================================================================================================
//конструктор и деструктор класса
//====================================================================================================

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CCardBox::CCardBox(void)
{ 
}

//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CCardBox::~CCardBox()
{
}

//====================================================================================================
//закрытые функции класса
//====================================================================================================

//====================================================================================================
//открытые функции класса
//====================================================================================================

//----------------------------------------------------------------------------------------------------
//получить,пуст ли ящик
//----------------------------------------------------------------------------------------------------
bool CCardBox::IsEmpty(void)
{
 return(deque_CCard.empty());
}
//----------------------------------------------------------------------------------------------------
//получить количество карт в ящике
//----------------------------------------------------------------------------------------------------
size_t CCardBox::GetCardAmount(void)
{
 return(deque_CCard.size());
}

//----------------------------------------------------------------------------------------------------
//сохранить состояние
//----------------------------------------------------------------------------------------------------
bool CCardBox::SaveState(std::ofstream &file)
{
 size_t size=deque_CCard.size();
 if (file.write(reinterpret_cast<char*>(&size),sizeof(size_t)).fail()==true) return(false);
 for(size_t n=0;n<size;n++)
 {
  if (deque_CCard[n].SaveState(file)==false) return(false);
 };
 return(true);
}
//----------------------------------------------------------------------------------------------------
//загрузить состояние
//----------------------------------------------------------------------------------------------------
bool CCardBox::LoadState(std::ifstream &file)
{
 size_t size;
 if (file.read(reinterpret_cast<char*>(&size),sizeof(size_t)).fail()==true) return(false);
 deque_CCard.clear();
 for(size_t n=0;n<size;n++)
 {
  CCard cCard;
  if (cCard.LoadState(file)==false) return(false);
  deque_CCard.push_back(cCard);
 }
 return(true);
}
//----------------------------------------------------------------------------------------------------
//получить положение на экране карты в ящике в позиции card_index
//----------------------------------------------------------------------------------------------------
CRectangle CCardBox::GetCardRectangle(int32_t card_index)
{
 int32_t x=cRectangle_Position.cCoord_Position.X+cCoord_CardOffset.X*card_index;
 int32_t y=cRectangle_Position.cCoord_Position.Y+cCoord_CardOffset.Y*card_index;
 return(CRectangle(CCoord(x,y),cRectangle_Position.cCoord_Size));
}

//----------------------------------------------------------------------------------------------------
//переместить одну карту из ящика в данный ящик
//----------------------------------------------------------------------------------------------------
bool CCardBox::MoveOneCard(CCardBox &cCardBox_Source)
{
 if (cCardBox_Source.IsEmpty()==true) return(false);//исходный ящик пуст
 deque_CCard.push_back(cCardBox_Source.deque_CCard.back());
 cCardBox_Source.deque_CCard.pop_back();
 return(true);
}
//----------------------------------------------------------------------------------------------------
//переместить карты в данный ящик
//----------------------------------------------------------------------------------------------------

#include <windows.h>

void CCardBox::MoveCard(CCardBox &cCardBox_Source,size_t card_amount)
{
 size_t size=cCardBox_Source.GetCardAmount();
 if (size<card_amount)
 {
  MessageBox(NULL,"Мало карт!","Ошибка",MB_OK);//только для отладки - убрать в релизе!
  return;
 } 
 size_t position=size-card_amount;
 while(position<size)
 {  
  deque_CCard.push_back(cCardBox_Source.deque_CCard[position]);
  position++;
 }
 //убираем карты из исходного ящика
 while(card_amount>0)
 {
  if (cCardBox_Source.IsEmpty()==true) break;//исходный ящик пуст
  cCardBox_Source.deque_CCard.pop_back();
  card_amount--;
 }
}
